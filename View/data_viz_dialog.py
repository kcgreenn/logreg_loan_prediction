# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\View\data_viz_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QStyleFactory, QVBoxLayout
from PyQt5.QtChart import QChart, QChartView, QBarSet, QBarSeries, QBarCategoryAxis
import matplotlib as plt

plt.rc("font", size=12)

# View controller of the Data Visualization Screen
class Ui_Dialog(QDialog):
    def __init__(self, data):
        super().__init__()

        self.data = data
        self.factor_list = ['Overall', 'Term Length', 'Region', 'Urban/Rural', 'New/Existing', 'Approval Fiscal Year']

        self.layout = QVBoxLayout()
        self.setObjectName("Data_Viz_Dialog")
        self.resize(600, 500)
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setObjectName("plot_btn")
        self.pushButton.setStyleSheet('background:#0275d8;color:#f7f7f7')
        self.pushButton.setStyle(QStyleFactory.create('Windows'))
        self.pushButton.clicked.connect(self.handle_plot_btn_click)
        self.pushButton.setGeometry(QtCore.QRect(110, 260, 161, 32))
        self.pushButton.setText('Plot Chart')
        self.factor_combo_box = QtWidgets.QComboBox(self)
        self.factor_combo_box.setGeometry(QtCore.QRect(180, 20, 191, 21))
        self.factor_combo_box.setObjectName("factor_combo_box")
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(10, 10, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("data_viz_label")

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Data Visualization"))
        self.label.setText(_translate("Dialog", "View Data By:"))

        QtCore.QMetaObject.connectSlotsByName(self)
        self.chartview = QChartView()
        self.set_viz_layout()
        self.find_overall_stats()
        self.add_factor_options()

    # Creates a bar chart from two sets of data
    def create_2set_chart(self, set0Title, set0, set1Title, set1, title, categories):
        self.chartview.close()
        self.set0 = QBarSet(set0Title)
        self.set1 = QBarSet(set1Title)

        for item in set0:
            self.set0 << item

        for item in set1:
            self.set1 << item

        self.series = QBarSeries()
        self.series.append(self.set0)
        self.series.append(self.set1)

        self.chart = QChart()
        self.chart.addSeries(self.series)
        self.chart.setTitle(title)
        self.chart.setAnimationOptions(QChart.SeriesAnimations)

        categories = categories
        self.axis = QBarCategoryAxis()
        self.axis.append(categories)
        self.chart.createDefaultAxes()
        self.chart.setAxisX(self.axis, self.series)

        self.chartview = QChartView(self.chart)
        self.layout.removeWidget(self.chartview)
        self.layout.addWidget(self.chartview)

        self.setLayout(self.layout)

    # Creates a bar chart from 4 sets of data
    def create_4set_chart(self, set0Title, set0, set1Title, set1, set2Title, set2, set3Title, set3, title, categories):
        self.chartview.close()

        self.set0 = QBarSet(set0Title)
        self.set1 = QBarSet(set1Title)
        self.set2 = QBarSet(set2Title)
        self.set3 = QBarSet(set3Title)

        for item in set0:
            self.set0 << item

        for item in set1:
            self.set1 << item

        for item in set2:
            self.set2 << item

        for item in set3:
            self.set3 << item

        self.series = QBarSeries()
        self.series.append(self.set0)
        self.series.append(self.set1)
        self.series.append(self.set2)
        self.series.append(self.set3)

        self.chart = QChart()

        self.chart.addSeries(self.series)
        self.chart.setTitle(title)
        self.chart.setAnimationOptions(QChart.SeriesAnimations)

        categories = categories
        self.axis = QBarCategoryAxis()

        self.axis.append(categories)
        self.chart.createDefaultAxes()
        self.chart.setAxisX(self.axis, self.series)

        self.chartview = QChartView(self.chart)
        self.layout.removeWidget(self.chartview)
        self.layout.addWidget(self.chartview)

        self.setLayout(self.layout)

    # Set the layout of the data visualization screen
    def set_viz_layout(self):
        self.layout.addWidget(self.label)
        self.layout.addWidget(self.factor_combo_box)
        self.layout.addWidget(self.pushButton)
        self.setLayout(self.layout)

    # Add options to the factor combo box
    def add_factor_options(self):
        self.factor_combo_box.addItems(self.factor_list)

    # Handles clicking of the chart plot button
    def handle_plot_btn_click(self):
        if self.factor_combo_box.currentText() == 'Overall':
            self.find_overall_stats()
        elif self.factor_combo_box.currentText() == 'Urban/Rural':
            self.find_area_stats()
        elif self.factor_combo_box.currentText() == 'New/Existing':
            self.find_age_stats()
        elif self.factor_combo_box.currentText() == 'Approval Fiscal Year':
            self.find_fy_stats()
        elif self.factor_combo_box.currentText() == 'Term Length':
            self.find_term_stats()
        elif self.factor_combo_box.currentText() == 'Region':
            self.find_region_stats()

    # Find the overall chargeoff rate of the data
    def find_overall_stats(self):
        data = self.data.get_data()
        count_chgoff = len(data[data['MIS_Status_P I F'] == 0])
        count_pif = len(data[data['MIS_Status_P I F'] == 1])
        pct_chgoff = count_chgoff / (count_chgoff + count_pif)
        pct_pif = count_pif / (count_chgoff + count_pif)

        self.create_2set_chart('ChgOff', [pct_chgoff * 100], 'P I F', [pct_pif * 100], 'Overall ChgOff Rate', [''])

    # Find the chargeoff rates of rural and urban areas
    def find_area_stats(self):
        data = self.data.get_data()
        urban_data = data[data['Area_Urban'] == 1]
        rural_data = data[data['Area_Rural'] == 1]

        total_urban = urban_data['MIS_Status_P I F'].value_counts()[0] + urban_data['MIS_Status_P I F'].value_counts()[
            1]
        total_rural = rural_data['MIS_Status_P I F'].value_counts()[0] + rural_data['MIS_Status_P I F'].value_counts()[
            1]
        percent_urban_pif = ((total_urban - urban_data['MIS_Status_P I F'].value_counts()[0]) / total_urban) * 100
        percent_rural_pif = ((total_rural - rural_data['MIS_Status_P I F'].value_counts()[0]) / total_rural) * 100

        self.create_2set_chart('Rural', [percent_rural_pif], 'Urban', [percent_urban_pif], 'P I F rate By Geo. Area',
                          ['Geo. Area'])

    # Find cahrgeoff rates against new or old business status
    def find_age_stats(self):
        data = self.data.get_data()
        new_data = data[data['Business_Existing'] == 0]
        exist_data = data[data['Business_Existing'] == 1]

        total_new = new_data['MIS_Status_P I F'].value_counts()[0] + \
                      new_data['MIS_Status_P I F'].value_counts()[
                          1]
        total_exist = exist_data['MIS_Status_P I F'].value_counts()[0] + \
                      exist_data['MIS_Status_P I F'].value_counts()[
                          1]
        percent_new_pif = ((total_new - new_data['MIS_Status_P I F'].value_counts()[0]) / total_new) * 100
        percent_exist_pif = ((total_exist - exist_data['MIS_Status_P I F'].value_counts()[0]) / total_exist) * 100

        self.create_2set_chart('New', [percent_new_pif], 'Exist', [percent_exist_pif], 'P I F rate By Business Age',
                          ['Age'])

    # Find chargeoff rates by fiscal year
    def find_fy_stats(self):
        data = self.data.get_data()
        fy70s_data = data[(data['ApprovalFY'] >= 1970) & (data['ApprovalFY'] < 1980)]
        fy80s_data = data[(data['ApprovalFY'] >= 1980) & (data['ApprovalFY'] < 1990)]
        fy90s_data = data[(data['ApprovalFY'] >= 1990) & (data['ApprovalFY'] < 2000)]
        fy00s_data = data[(data['ApprovalFY'] >= 2000) & (data['ApprovalFY'] < 2010)]

        total_70s = fy70s_data['MIS_Status_P I F'].value_counts()[0] + \
                      fy70s_data['MIS_Status_P I F'].value_counts()[
                          1]
        total_80s = fy80s_data['MIS_Status_P I F'].value_counts()[0] + \
                    fy80s_data['MIS_Status_P I F'].value_counts()[
                        1]
        total_90s = fy90s_data['MIS_Status_P I F'].value_counts()[0] + \
                    fy90s_data['MIS_Status_P I F'].value_counts()[
                        1]
        total_00s = fy00s_data['MIS_Status_P I F'].value_counts()[0] + \
                    fy00s_data['MIS_Status_P I F'].value_counts()[
                        1]

        percent_70s_pif = ((total_70s - fy70s_data['MIS_Status_P I F'].value_counts()[0]) / total_70s) * 100
        percent_80s_pif = ((total_80s - fy80s_data['MIS_Status_P I F'].value_counts()[0]) / total_80s) * 100
        percent_90s_pif = ((total_90s - fy90s_data['MIS_Status_P I F'].value_counts()[0]) / total_90s) * 100
        percent_00s_pif = ((total_00s - fy00s_data['MIS_Status_P I F'].value_counts()[0]) / total_00s) * 100

        self.create_4set_chart("70's", [percent_70s_pif], "80's", [percent_80s_pif], "90's", [percent_90s_pif],
                               "00's", [percent_00s_pif], 'P I F rate By Decade', ['Decade'])

    # Find chargeoff rates by term of the loan
    def find_term_stats(self):
        data = self.data.get_data()
        lt50_data = data[(data['Term'] >= 0) & (data['Term'] < 51)]
        lt125_data = data[(data['Term'] >= 52) & (data['Term'] < 126)]
        lt200_data = data[(data['Term'] >= 127) & (data['Term'] < 201)]
        gt200_data = data[(data['Term'] >= 202)]

        total_lt50 = lt50_data['MIS_Status_P I F'].value_counts()[0] + \
                      lt50_data['MIS_Status_P I F'].value_counts()[
                          1]
        total_lt125 = lt125_data['MIS_Status_P I F'].value_counts()[0] + \
                    lt125_data['MIS_Status_P I F'].value_counts()[
                        1]
        total_lt200 = lt200_data['MIS_Status_P I F'].value_counts()[0] + \
                    lt200_data['MIS_Status_P I F'].value_counts()[
                        1]
        total_gt200 = gt200_data['MIS_Status_P I F'].value_counts()[0] + \
                    gt200_data['MIS_Status_P I F'].value_counts()[
                        1]

        percent_lt50_pif = ((total_lt50 - lt50_data['MIS_Status_P I F'].value_counts()[0]) / total_lt50) * 100
        percent_lt125_pif = ((total_lt125 - lt125_data['MIS_Status_P I F'].value_counts()[0]) / total_lt125) * 100
        percent_lt200_pif = ((total_lt200 - lt200_data['MIS_Status_P I F'].value_counts()[0]) / total_lt200) * 100
        percent_gt200_pif = ((total_gt200 - gt200_data['MIS_Status_P I F'].value_counts()[0]) / total_gt200) * 100

        self.create_4set_chart("Less Then 50", [percent_lt50_pif], "50 - 125", [percent_lt125_pif], "125 - 200", [percent_lt200_pif],
                               "Greater Then 200", [percent_gt200_pif], 'P I F rate By Term Length (in months)', ['Months'])

    # Find chargeoff rates by timezone 
    def find_region_stats(self):
        data = self.data.get_data()
        west_data = data.loc[data['State'].str.contains('CA|OR|WA|NV'), :]
        mtn_data = data.loc[data['State'].str.contains('ID|AZ|CO|MT|NM|UT|WY'), :]
        cntrl_data = data.loc[data['State'].str.contains('AL|AR|IL|IA|LA|MN|MS|MO|OK|WI|MI|KS|NE|ND|TX'), :]
        east_data = data.loc[data['State'].str.contains(
            'TN|KY|SD|CT|DE|DC|GA|ME|MD|MA|NH|NJ|NY|NC|OH|PA|RI|SC|VT|VA|WV|FL'), :]

        total_west = west_data['MIS_Status_P I F'].value_counts()[0] + \
                      west_data['MIS_Status_P I F'].value_counts()[
                          1]
        total_mtn = mtn_data['MIS_Status_P I F'].value_counts()[0] + \
                    mtn_data['MIS_Status_P I F'].value_counts()[
                        1]
        total_cntrl = cntrl_data['MIS_Status_P I F'].value_counts()[0] + \
                    cntrl_data['MIS_Status_P I F'].value_counts()[
                        1]
        total_east = east_data['MIS_Status_P I F'].value_counts()[0] + \
                    east_data['MIS_Status_P I F'].value_counts()[
                        1]

        percent_west_pif = ((total_west - west_data['MIS_Status_P I F'].value_counts()[0]) / total_west) * 100
        percent_mtn_pif = ((total_mtn - mtn_data['MIS_Status_P I F'].value_counts()[0]) / total_mtn) * 100
        percent_cntrl_pif = ((total_cntrl - cntrl_data['MIS_Status_P I F'].value_counts()[0]) / total_cntrl) * 100
        percent_east_pif = ((total_east - east_data['MIS_Status_P I F'].value_counts()[0]) / total_east) * 100

        self.create_4set_chart("West", [percent_west_pif], "Mountain", [percent_mtn_pif], "Central", [percent_cntrl_pif],
                               "East", [percent_east_pif], 'P I F rate By Region (timezone)', ['TimeZone'])
